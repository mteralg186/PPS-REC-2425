<%- include('partes/header') %>

<div class="container mt-5">
    <h1 class="text-center mb-4">Crear Test</h1>
    <div class="text-center mb-4">
        <span id="questionCount">0</span>
        <span>/20 preguntas</span>
    </div>
    <button id="newQuestionBtn" class="btn btn-primary mb-4">Añadir Pregunta</button>

    <form id="testForm" action="/enviaTest" method="POST">
        <div id="questionsContainer"></div>
        <button type="submit" class="btn btn-success mt-4">Enviar Test</button>
    </form>
</div>

<script>
    let questionCounter = 0;
    let questions = [];

    function addQuestion() {
        if (questionCounter >= 20) {
            alert('Ya has alcanzado el máximo de 20 preguntas.');
            return;
        }
        questionCounter++;
        const questionTitle = `${questionCounter}.`;
        const questionDiv = document.createElement('div');
        questionDiv.classList.add('question-container');

        showQuestionForm(questionDiv, questionTitle);

        document.getElementById('questionsContainer').appendChild(questionDiv);
        updateQuestionCount();
    }

    function showQuestionForm(questionDiv, questionTitle, questionData = null) {
    // Limpiar contenido preservando el nodo
    while (questionDiv.firstChild) {
        questionDiv.removeChild(questionDiv.firstChild);
    }

    const form = document.createElement('div');

    const questionInput = document.createElement('input');
    questionInput.setAttribute('type', 'text');
    questionInput.setAttribute('placeholder', 'Escribe el nombre de la pregunta');
    questionInput.classList.add('form-control', 'mb-3');
    if (questionData) {
        questionInput.value = questionData.question;
    }
    form.appendChild(questionInput);

    const answersContainer = document.createElement('div');
    answersContainer.classList.add('answers-container');

    let correctAnswerIndex = questionData ? questionData.answers.indexOf(questionData.correctAnswer) : null;

    function addAnswer(answerText = '') {
        const answerContainer = document.createElement('div');
        answerContainer.classList.add('answer-container', 'd-flex', 'align-items-center', 'mb-2', 'gap-2');

        const answerInput = document.createElement('input');
        answerInput.setAttribute('type', 'text');
        answerInput.setAttribute('placeholder', 'Escribe una respuesta');
        answerInput.classList.add('form-control', 'answer-input');
        answerInput.value = answerText;

        const correctAnswerBtn = document.createElement('button');
        correctAnswerBtn.textContent = '✓';
        correctAnswerBtn.classList.add('btn', 'btn-outline-success', 'correct-answer');

        if (correctAnswerIndex !== null && answersContainer.children.length === correctAnswerIndex) {
            correctAnswerBtn.classList.add('btn-success');
            correctAnswerBtn.classList.remove('btn-outline-success');
        }

        correctAnswerBtn.addEventListener('click', function (event) {
            event.preventDefault();
            correctAnswerIndex = Array.from(answersContainer.children).indexOf(answerContainer);
            updateCorrectAnswerIndex();
        });

        const removeBtn = document.createElement('button');
        removeBtn.innerHTML = '&#10005;';
        removeBtn.classList.add('btn', 'btn-outline-danger', 'delete-answer');
        removeBtn.addEventListener('click', function (event) {
            event.preventDefault();
            const index = Array.from(answersContainer.children).indexOf(answerContainer);
            answersContainer.removeChild(answerContainer);
            if (correctAnswerIndex === index) {
                correctAnswerIndex = null;
            } else if (correctAnswerIndex > index) {
                correctAnswerIndex--;
            }
            updateCorrectAnswerIndex();
        });

        answerContainer.appendChild(answerInput);
        answerContainer.appendChild(correctAnswerBtn);
        answerContainer.appendChild(removeBtn);
        answersContainer.appendChild(answerContainer);
    }

    function updateCorrectAnswerIndex() {
        Array.from(answersContainer.children).forEach((child, index) => {
            const btn = child.querySelector('.correct-answer');
            if (index === correctAnswerIndex) {
                btn.classList.add('btn-success');
                btn.classList.remove('btn-outline-success');
            } else {
                btn.classList.remove('btn-success');
                btn.classList.add('btn-outline-success');
            }
        });
    }

    const addAnswerBtn = document.createElement('button');
    addAnswerBtn.textContent = 'Añadir Respuesta';
    addAnswerBtn.classList.add('btn', 'btn-secondary', 'mb-2');
    addAnswerBtn.style.display = 'block';
    addAnswerBtn.addEventListener('click', function (event) {
        event.preventDefault();
        addAnswer();
    });

    const submitBtn = document.createElement('button');
    submitBtn.textContent = 'Aceptar Pregunta';
    submitBtn.classList.add('btn', 'btn-success', 'mb-2');
    submitBtn.style.display = 'block';
    submitBtn.addEventListener('click', function (event) {
        event.preventDefault();

        const questionName = questionInput.value.trim();
        const answers = Array.from(answersContainer.querySelectorAll('.answer-input')).map(input => input.value.trim()).filter(v => v !== '');

        if (questionName && answers.length > 0 && correctAnswerIndex !== null) {
            const questionIndex = questions.findIndex(q => q.questionTitle === questionTitle);
            const questionData = {
                questionTitle,
                question: questionName,
                answers,
                correctAnswer: answers[correctAnswerIndex]
            };

            if (questionIndex > -1) {
                questions[questionIndex] = questionData;
            } else {
                questions.push(questionData);
            }

            renderQuestionSummary(questionDiv, questionData);
            updateQuestionCount();
        } else {
            alert('Por favor, completa todos los campos y selecciona una respuesta correcta.');
        }
    });

    form.appendChild(addAnswerBtn);
    form.appendChild(answersContainer);
    form.appendChild(submitBtn);
    questionDiv.appendChild(form);

    if (questionData && questionData.answers.length > 0) {
        questionData.answers.forEach(answer => addAnswer(answer));
    }

    questionInput.focus();
}
    function renderQuestionSummary(questionDiv, questionData) {
        questionDiv.innerHTML = '';

        const questionNumber = document.createElement('h3');
        questionNumber.textContent = `${questionData.questionTitle} ${questionData.question}`;
        questionNumber.classList.add('question-title');
        questionDiv.appendChild(questionNumber);

        const removeButton = document.createElement('button');
        removeButton.innerHTML = '&#10005;';
        removeButton.classList.add('delete-question');
        removeButton.addEventListener('click', function () {
            document.getElementById('questionsContainer').removeChild(questionDiv);
            questions = questions.filter(q => q.questionTitle !== questionData.questionTitle);
            updateQuestionNumbers();
        });
        questionDiv.appendChild(removeButton);

        const description = document.createElement('p');
        description.textContent = `${questionData.question} (${questionData.answers.length} opciones)`;
        questionDiv.appendChild(description);

        questionDiv.addEventListener('mouseover', function () {
            removeButton.style.display = 'inline';
        });
        questionDiv.addEventListener('mouseout', function () {
            removeButton.style.display = 'none';
        });

        questionNumber.addEventListener('click', function () {
            showQuestionForm(questionDiv, questionData.questionTitle, questionData);
        });
    }

    function updateQuestionNumbers() {
        const questionDivs = document.querySelectorAll('#questionsContainer > .question-container');
        questionCounter = 0;
        questionDivs.forEach((questionDiv, index) => {
            questionCounter++;
            const questionTitle = `${questionCounter}.`;
            const oldTitle = questionDiv.querySelector('.question-title')?.textContent;
            questionDiv.querySelector('.question-title').textContent = questionTitle;

            const i = questions.findIndex(q => q.questionTitle === oldTitle);
            if (i >= 0) questions[i].questionTitle = questionTitle;
        });
        updateQuestionCount();
    }

    function updateQuestionCount() {
        document.getElementById('questionCount').textContent = `${questionCounter}`;
    }

    document.getElementById('newQuestionBtn').addEventListener('click', addQuestion);

    document.getElementById('testForm').addEventListener('submit', function (event) {
        event.preventDefault();
        if (questions.length > 0) {
            fetch('/enviaTest', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(questions)
            })
                .then(response => {
                    if (response.ok) {
                        console.log('Datos enviados correctamente');
                    } else {
                        console.error('Error al enviar los datos');
                    }
                })
                .catch(error => {
                    console.error('Error de red:', error);
                });
        } else {
            alert('No hay preguntas para enviar');
        }
    });

    function loadQuestions() {
        questions.forEach(questionData => {
            const questionDiv = document.createElement('div');
            questionDiv.classList.add('question-container');
            renderQuestionSummary(questionDiv, questionData);
            document.getElementById('questionsContainer').appendChild(questionDiv);
        });
        updateQuestionNumbers();
    }

    loadQuestions();



        
//Nueva parte


document.getElementById('testForm').addEventListener('submit', function(event) {
    event.preventDefault(); // Evitar que el formulario se envíe automáticamente

    // Verificar si hay preguntas para enviar
    if (questions.length > 0) {
        // Realizar la solicitud POST con Fetch
        fetch('/enviaTest', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(questions) // Convertir los datos a formato JSON
        })
        .then(response => {
            if (response.ok) {
                // La solicitud fue exitosa, hacer algo con la respuesta si es necesario
                console.log('Datos enviados correctamente');
            } else {
                // Hubo un problema con la solicitud
                console.error('Error al enviar los datos');
            }
        })
        .catch(error => {
            console.error('Error de red:', error);
        });
    } else {
        // No hay preguntas para enviar, mostrar un mensaje de error
        alert('No hay preguntas para enviar');
    }
});
</script>
<%- include('partes/footer') %>